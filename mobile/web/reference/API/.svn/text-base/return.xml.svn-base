<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>return</name>

<category>Structure</category>

<subcategory></subcategory>

<usage>Web &amp; Application</usage>

<example>
<image></image>
<code>
int val = 30;
 
void draw() {
  int t = timestwo(val);
  println(t);
}

int timestwo(int dVal) {
  dVal = dVal * 2;
  return dVal;
}
</code>
</example>

<example>
<image></image>
<code>
int[] vals = {10, 20, 30}; 
  
void draw() { 
  int[] t = timestwo(vals); 
  println(t); 
  noLoop();
} 
 
int[] timestwo(int[] dVals) { 
  for(int i=0; i &lt; dVals.length; i++) { 
    dVals[i] = dVals[i] * 2; 
  } 
  return dVals; 
} 
</code>
</example>

<example>
<image></image>
<code>
void draw() {
  background(204);
  line(0, 0, width, height);
  if(mousePressed) {
    return;
  }
  line(0, height, width, 0);
}

</code>
</example>

<description>
Keyword used to indicate the value to return from a function. The value being returned must be the same datatype as defined in the function declaration. Functions declared with <b>void</b> can't return values and shouldn't include a return value. The keyword <b>return</b> may also be used to break out of a function thus not allowing the program to read the remaining statements (see the third example above).
</description>

<syntax>
<c>type</c> <c>function</c> {
  <c>statements</c>
  return <c>value</c>
}
</syntax>

<parameter>
<label>type</label>
<description>boolean, byte, char, int, String, boolean[], byte[], char[], int[], String[]</description>
</parameter>

<parameter>
<label>function</label>
<description>any function that is being defined</description>
</parameter>

<parameter>
<label>statements</label>
<description>any valid statements</description>
</parameter>

<parameter>
<label>value</label>
<description>must be the same datatype as the type parameter</description>
</parameter>

<returns></returns>

<related>
</related>

<availability>1.0</availability>

<type>Keyword</type>

<partof>PDE</partof>


</root>
