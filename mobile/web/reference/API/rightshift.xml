<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>>> (right shift)</name>

<category>Math</category>

<subcategory>Bitwise Operators</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image></image>
<code>
int m = 8 >> 3;    // In binary: 1000 to 1
println(m);  // Prints "1"
int n = 256 >> 6;  // In binary: 100000000 to 100 
println(n);  // Prints "4"
int o = 16 >> 3;   // In binary: 10000 to 10 
println(o);  // Prints "2"
int p = 26 >> 1;   // In binary: 11010 to 1101 
println(p);  // Prints "13"
</code>
</example>

<example>
<image></image>
<code>
color rgb = color(204, 204, 51);
int r = rgb >> 16 &amp; 0xFF;  // Faster way of getting red(rgb)
int g = rgb >> 8 &amp; 0xFF;   // Faster way of getting green(rgb)
int b = rgb &amp; 0xFF;        // Faster way of getting blue(rgb)
fill(r, g, b);
rect(30, 20, 55, 55);
</code>
</example>

<description>
Shifts bits to the right. The number to the left of the operator is shifted the number of places specified by the number to the right. Each shift to the right halves the number, therefore each left shift divides the original number by 2. Use the right shift for fast divisions or to extract an individual number from a packed number. Right shifting only works with integers or numbers which automatically convert to an integer such at byte and char.
</description>

<syntax>
<c>value</c> >> <c>n</c>
</syntax>

<parameter>
<label>value</label>
<description>int: the value to shift</description>
</parameter>

<parameter>
<label>n</label>
<description>int: the number of places to shift right</description>
</parameter>

<returns></returns>

<related>
&lt;&lt; (left shift)
</related>

<availability>1.0</availability>

<type>Operator</type>

<partof>PDE</partof>

<level>Extended</level>


</root>
