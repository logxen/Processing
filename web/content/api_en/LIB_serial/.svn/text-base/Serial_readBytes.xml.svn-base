<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>

<name>readBytes()</name>

<category>Serial</category>

<subcategory>Serial</subcategory>

<usage>Web &amp; Application</usage>

<example>
<image></image>
<code><![CDATA[
// Example by Tom Igoe

import processing.serial.*;

Serial myPort;  // The serial port

void setup() {
  // List all the available serial ports
  println(Serial.list());
  // Open the port you are using at the rate you want:
  myPort = new Serial(this, Serial.list()[0], 9600);
}

void draw() {
  // Expand array size to the number of bytes you expect
  byte[] inBuffer = new byte[7];
  while (myPort.available() > 0) {
    inBuffer = myPort.readBytes();
    myPort.readBytes(inBuffer);
    if (inBuffer != null) {
      String myString = new String(inBuffer);
      println(myString);
    }
  }
}

]]></code>
</example>

<description><![CDATA[
Reads a group of bytes from the buffer. The version with no parameters returns a byte array of all data in the buffer. This is not efficient, but is easy to use. The version with the <b>byteBuffer</b> parameter is more memory and time efficient. It grabs the data in the buffer and puts it into the byte array passed in and returns an int value for the number of bytes read. If more bytes are available than can fit into the <b>byteBuffer</b>, only those that fit are read.
]]></description>


</root>
