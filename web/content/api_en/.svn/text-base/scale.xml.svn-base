<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>scale()</name>

<category>Transform</category>

<subcategory></subcategory>

<type></type>

<example>
<image>scale_0.png</image>
<code><![CDATA[
rect(30, 20, 50, 50);
scale(0.5);
rect(30, 20, 50, 50);
]]></code>
</example>

<example>
<image>scale_1.png</image>
<code><![CDATA[
rect(30, 20, 50, 50);
scale(0.5, 1.3);
rect(30, 20, 50, 50);
]]></code>
</example>

<example>
<image>scale_2.png</image>
<code><![CDATA[
// Scaling in 3D requires P3D 
// as a parameter to size()
size(100, 100, P3D);
noFill();
translate(width/2+12, height/2);
box(20, 20, 20);
scale(2.5, 2.5, 2.5);
box(20, 20, 20);
]]></code>
</example>

<description><![CDATA[
Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call <b>scale(2.0)</b> increases the dimension of a shape by 200%. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling <b>scale(2.0)</b> and then <b>scale(1.5)</b> is the same as <b>scale(3.0)</b>. If <b>scale()</b> is called within <b>draw()</b>, the transformation is reset when the loop begins again. Using this fuction with the <b>z</b> parameter requires using P3D as a parameter for <b>size()</b> as shown in the example above. This function can be further controlled by <b>pushMatrix()</b> and <b>popMatrix()</b>.
]]></description>

</root>
