<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>translate()</name>

<category>Transform</category>

<subcategory></subcategory>

<type></type>

<example>
<image>translate_0.png</image>
<code><![CDATA[
translate(30, 20);
rect(0, 0, 55, 55);
]]></code>
</example>

<example>
<image>translate_1.png</image>
<code><![CDATA[
// Translating in 3D requires P3D
// as the parameter to size()
size(100, 100, P3D);
// Translate 30 across, 20 down, and
// 50 back, or "away" from the screen.
translate(30, 20, -50);
rect(0, 0, 55, 55);
]]></code>
</example>

<example>
<image>translate_2.png</image>
<code><![CDATA[
rect(0, 0, 55, 55);  // Draw rect at original 0,0
translate(30, 20);
rect(0, 0, 55, 55);  // Draw rect at new 0,0
translate(14, 14);
rect(0, 0, 55, 55);  // Draw rect at new 0,0
]]></code>
</example>

<description><![CDATA[
Specifies an amount to displace objects within the display window. The <b>x</b> parameter specifies left/right translation, the <b>y</b> parameter specifies up/down translation, and the <b>z</b> parameter specifies translations toward/away from the screen. Using this function with the <b>z</b> parameter requires using P3D as a parameter in combination with size as shown in the above example.
<br/><br/>
Transformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <b>translate(50, 0)</b> and then <b>translate(20, 0)</b> is the same as <b>translate(70, 0)</b>. If <b>translate()</b> is called within <b>draw()</b>, the transformation is reset when the loop begins again. This function can be further controlled by using <b>pushMatrix()</b> and <b>popMatrix()</b>.
]]></description>

</root>
