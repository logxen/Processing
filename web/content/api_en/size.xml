<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>size()</name>

<category>Environment</category>

<subcategory></subcategory>

<type></type>

<example>
<image>size_0.png</image>
<code><![CDATA[
void setup() {
  size(320, 240);
  background(153);
}

void draw() {
  line(0, 0, width, height);
}
]]></code>
</example>

<example>
<image>size_1.png</image>
<code><![CDATA[
void setup() {
  size(150, 200, P3D);  // Specify P3D renderer
  background(153);
}

void draw() {
  // With P3D, we can use z (depth) values...
  line(0, 0, 0, width, height, -100);
  line(width, 0, 0, width, height, -100);
  line(0, height, 0, width, height, -100);
  
  //...and 3D-specific functions, like box()
  translate(width/2, height/2);
  rotateX(PI/6);
  rotateY(PI/6);
  box(35);
}
]]></code>
</example>

<description><![CDATA[
Defines the dimension of the display window in units of pixels. The <b>size()</b> function must be the first line of code, or the first code inside <b>setup()</b>. Any code that appears before the <b>size()</b> command may run more than once, which can lead to confusing results.<br/>
<br/>
The system variables <b>width</b> and <b>height</b> are set by the parameters passed to this function. If <b>size()</b> is not used, the window will be given a default size of 100x100 pixels. <br/>
<br/>
The <b>size()</b> function can only be used once inside a sketch, and it cannot be used for resizing.<br/>
<br/>
Do not use variables as the parameters to <b>size()</b> function, because it will cause problems when exporting your sketch. When variables are used, the dimensions of your sketch cannot be determined during export. Instead, employ numeric values in the <b>size()</b> statement, and then use the built-in <b>width</b> and <b>height</b> variables inside your program when the dimensions of the display window are needed.<br/>
<br/>
The maximum width and height is limited by your operating system, and is usually the width and height of your actual screen. On some machines it may simply be the number of pixels on your current screen, meaning that a screen of 800x600 could support <b>size(1600, 300)</b>, since it's the same number of pixels. This varies widely so you'll have to try different rendering modes and sizes until you get what you're looking for. If you need something larger, use <b>createGraphics</b> to create a non-visible drawing surface.<br/>
<br/>
The <b>renderer</b> parameter selects which rendering engine to use. For example, if you will be drawing 3D shapes, use <b>P3D</b>. A brief description of each renderer follows:<br/>
<br/>
<b>P2D</b> (Processing 2D): The default renderer that supports two dimensional drawing.<br/>
<br/>
<b>P3D</b> (Processing 3D): 3D graphics renderer that makes use of OpenGL-compatible graphics hardware.<br/>
<br/>
<b>PDF</b>: The PDF renderer draws 2D graphics directly to an Acrobat PDF file. This produces excellent results when you need vector shapes for high-resolution output or printing. You must first use Import Library &rarr; PDF to make use of the library. More information can be found in the PDF library reference.<br/>
<br/>
Note that each renderer may support different drawing methods, or support them differently.  For example, the P3D renderer doesn't support <b>strokeCap()</b> or <b>strokeJoin()</b>, which can lead to ugly results when using <b>strokeWeight()</b>. (<a href="http://code.google.com/p/processing/issues/detail?id=123">Issue 123</a>) <br/>
]]></description>

</root>
