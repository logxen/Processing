<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>matchAll()</name>

<category>Data</category>

<subcategory>String Functions</subcategory>

<type></type>

<example>
<image></image>
<code><![CDATA[
String s = "Inside tags, you will find &lt;tag&gt;multiple&lt;/tag&gt; ";
       s += "&lt;tag&gt;pieces&lt;/tag&gt; of &lt;tag&gt;content&lt;/tag&gt;.";

String[][] m = matchAll(s, "&lt;tag&gt;(.*?)&lt;/tag&gt;");
for (int i = 0; i < m.length; i++) {
  println("Found '" + m[i][1] + "' inside a tag.");
}

// Prints to the console:
// "Found 'multiple' inside a tag."
// "Found 'pieces' inside a tag."
// "Found 'content' inside a tag."
]]></code>
</example>

<description><![CDATA[
This function is used to apply a regular expression to a piece of text, and return a list of matching groups (elements found inside parentheses) as a two-dimensional String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, a two dimensional array is still returned, but the second dimension is only of length one.<br />
<br />
To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, a 2D array is returned.<br/>
<br/>
If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Assuming a loop with counter variable i, element [i][0] of a regular expression match returns the entire matching string, and the match groups start at element [i][1] (the first group is [i][1], the second [i][2], and so on).<br/>
<br/>
The syntax can be found in the reference for Java's <a href="http://download.oracle.com/javase/6/docs/api/">Pattern</a> class. For regular expression syntax, read the <a href="http://download.oracle.com/javase/tutorial/essential/regex/">Java Tutorial</a> on the topic.
]]></description>

</root>
