<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>match()</name>

<category>Data</category>

<subcategory>String Functions</subcategory>

<type></type>

<example>
<image></image>
<code><![CDATA[
String s = "Inside a tag, you will find &lt;tag&gt;content&lt;/tag&gt;.";
String[] m = match(s, "&lt;tag&gt;(.*?)&lt;/tag&gt;");
println("Found '" + m[1] + "' inside the tag.");
// Prints to the console:
// "Found 'content' inside the tag."
]]></code>
</example>

<example>
<image></image>
<code><![CDATA[
String s1 = "Have you ever heard of a thing called fluoridation. "; 
       s1 += "Fluoridation of water?";
String s2 = "Uh? Yes, I-I have heard of that, Jack, yes. Yes.";

String[] m1 = match(s1, "fluoridation");
if (m1 != null) {  // If not null, then a match was found
  // This will print to the console, since a match was found.
  println("Found a match in '" + s1 + "'");  
} else {
  println("No match found in '" + s1 + "'");
}

String[] m2 = match(s2, "fluoridation");
if (m2 != null) {
  println("Found a match in '" + s2 + "'");
} else {
  // This will print to the console, since no match was found.
  println("No match found in '" + s2 + "'");  
}
]]></code>
</example>

<description><![CDATA[
This function is used to apply a regular expression to a piece of text, and return matching groups (elements found inside parentheses) as a String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, an array of length one (with the matched text as the first element of the array) will be returned.<br/>
<br/>
To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, an array is returned.<br/>
<br/>
If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Element [0] of a regular expression match returns the entire matching string, and the match groups start at element [1] (the first group is [1], the second [2], and so on).<br/>
<br/>
The syntax can be found in the reference for Java's <a href="http://download.oracle.com/javase/6/docs/api/">Pattern</a> class. For regular expression syntax, read the <a href="http://download.oracle.com/javase/tutorial/essential/regex/">Java Tutorial</a> on the topic.
]]></description>

</root>
